<?php
// $Id$

/**
 * Internationalization (i18n) module
 *
 * @author Jose A. Reyero, 2004
 *
 */

/**
 * Module initialization
 * 
 * Get language from path if exists and Initialize i18n system
 * May do a redirect from home page for not to get wrong versions in cache
 */

/**
 * Implementation of hook_init
 */

function i18n_init(){
  global $i18n_langpath;

  $path = _i18n_get_original_path();
  $i18n_langpath = i18n_get_lang_prefix($path);
  $lang = _i18n_get_lang();
  if ($path == '') { // Main page
    // Check for update or cron scripts to disable rewriting and redirection
    if(preg_match('|/(?!index\.php)\w+\.php|', request_uri())){
      i18n_selection_mode('off');
    } elseif( variable_get('cache',0) && $lang != i18n_default_language() ) {
      // Redirect to main page in $lang
      _i18n_goto($lang);
    } elseif (variable_get('i18n_frontpage',0)){
      $_GET['q'] = i18n_frontpage();
    } 
  } 
  elseif ($lang == $path) { // When path is only language code
    $_GET['q'] =  variable_get('i18n_frontpage',0) ? i18n_frontpage() : variable_get('site_frontpage','node'); 
  }
  elseif ($i18n_langpath) {
    //search alias with and without lang and remove lang
    $_GET['q'] = i18n_get_normal_path($path);
  } 
  
  // Multi tables, for backwards compatibility and experimentation
  global $db_prefix_i18n;
  if (is_array($db_prefix_i18n)) {
    _i18n_set_db_prefix(_i18n_get_lang());
  }

  // If not in bootstrap, include hooks
  if(!_i18n_is_bootstrap()){
    include drupal_get_path('module', 'i18n').'/i18n.inc';
    i18n_variable_init();    
  }
}   

/**
 * Implementation of hook_help().
 */
function i18n_help($section = 'admin/help#i18n' ) {
  switch ($section) {
    case 'admin/help#i18n' :
      return t('
        <p>This module provides support for multilingual content in Drupal sites:</p>
        <ul>
        <li>Translation of the user interface for anonymous users (combined with locale)</li>
        <li>Multi-language for content. Adds a language field for nodes and taxonomy vocabularies and terms</li>
        <li>Basic translation management</li>
        <li>Browser language detection</li>
        <li>Keeps the language setting accross consecutive requests using URL rewriting</li>
        <li>Provides a block for language selection and two theme functions: <i>i18n_flags</i> and <i>i18n_links</i></li>
        <li>Support for long locale names</li>
        </ul>
        <p><small>Module developed by Jose A. Reyero, <a href="http://www.reyero.net">www.reyero.net</a></small></p>' );
    case 'admin/modules#description' :
      return t('Enables multilingual content. <b>Requires locale module for interface translation</b>' );
  }
}

/**
 * Implementation of hook_settings().
 * 
 * Some options have been removed from previous versions:
 * - Languages are now taken from locale module unless defined in settings file
 * - Language dependent tables are authomatically used if defined in settings file
 */
function i18n_settings() {
  
  $form['i18n_browser'] = array(
    '#type' => 'radios',
    '#title' => t('Browser language detection'),
    '#default_value' => variable_get('i18n_browser', 0),
    '#options' => array(t('Disabled'), t('Enabled' )),
    '#description' => t('A description of this setting.'),
  );
  
  $form['i18n_frontpage'] = array(
    '#type' => 'radios',
    '#title' => t('Front page'),
    '#default_value' => variable_get('i18n_frontpage', 0),
    '#options' => array(t('Default'), t('Language dependent')),
    '#description' => t("If 'language dependent' is selected, default front page will be prepended with language code, i.e. 'en/node'"),
  );
  
  // Language icons
  $form['icons'] = array(
    '#type' => 'fieldset',
    '#title' => t('Language icons settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['icons']['i18n_icon_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Language icons path'),
    '#default_value' => variable_get('i18n_icon_path', drupal_get_path('module', 'i18n').'/flags/*.png'),
    '#size' => 70,
    '#maxlength' => 180,
    '#description' => t('Path for language icons, relative to Drupal installation. \'*\' is a placeholder for language code.'),
  );
  $form['icons']['i18n_icon_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Language icons size'),
    '#default_value' => variable_get('i18n_icon_size', '16x12'),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('Image size for language icons, in the form "width x height".'),
  );

  // Advanced options
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['advanced']['i18n_selection_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Content selection mode'),
    '#default_value' => variable_get('i18n_selection_mode', 'simple'),
    '#options' => _i18n_selection_mode(),
    '#description' => t('Determines which content to show depending on language.'),
  );
    
  return $form;
}

/**
 * Simple i18n API
 */

/**
 * Get list of supported languages
 */
function i18n_supported_languages() {
  global $i18n_languages;  
  static $languages;
  if ($languages) {
    return $languages;
  }
  elseif($languages = variable_get('i18n_languages', 0)) {
    return $languages;
  }   
  elseif ($languages = _i18n_locale_supported_languages()) {
    return $languages;
  } 
  else {
    return array();
  }
} 

/**
 * Returns default language
 */
function i18n_default_language(){
  $languages = i18n_supported_languages(); 
  return key($languages);  
}

/**
 * Get language from browser settings, but only if it is in the $i18n_languages array
 */
function i18n_get_browser_lang() {
  $languages = i18n_supported_languages();
  $exploded_server = explode(";",$_SERVER["HTTP_ACCEPT_LANGUAGE"]);
  $accept=explode(',',array_shift($exploded_server));
  foreach ($accept as $lang) {
    $lang=substr($lang,0,2);
    if ( !empty($lang) && array_key_exists($lang,$languages)) {
      return $lang;
    }
  }
}

/**
 * Get language code from path.
 *
 * @param $path
 * @param $trim true to remove language code from $path
 */
function i18n_get_lang_prefix(&$path, $trim = FALSE) {
  $exploded_path = explode('/', $path);
  $maybelang = array_shift($exploded_path);
  $languages = i18n_supported_languages();
  if(array_key_exists($maybelang, $languages)){
    if($trim) {
      $path = trim(substr($path, strlen($maybelang)),'/');
    }
    return $maybelang;
  }
}

/**
 * Language dependent front page
 */
function i18n_frontpage() {
  $path = _i18n_get_lang().'/'.variable_get('site_frontpage','node');
  return i18n_get_normal_path($path);
}

/**
 * This function is similar to drupal_get_normal_path, but language-aware
 * Also removes language from path
 */
function i18n_get_normal_path($path) {
  // First, check alias with lang, then without
  if ($alias = drupal_lookup_path('source', $path)) {
    return $alias;
  } elseif(i18n_get_lang_prefix($path, TRUE)){
    $alias = drupal_lookup_path('source', $path);
    return $alias ? $alias : $path;
    if( $alias && $path != $alias) {
      return $alias;
    }
  } 
  // We only get here when no alias is defined, with or without lang
  return $path;
}

/**
 *	Gets language, checking in order:
 *
 *	1. Path language
 *	2. User language
 *	3. Browser language
 *	4. Default language
 */

function _i18n_get_lang() {
  global $user, $i18n_langpath;
  static $i18n_lang;
  
  //see if the language is already set.
  if ($i18n_lang) {
    return $i18n_lang;
  }

  $languages = i18n_supported_languages();
   
  if ($i18n_langpath && array_key_exists($i18n_langpath,$languages)) {
    $i18n_lang = $i18n_langpath;
  }
  elseif ($user->uid && $user->language && array_key_exists($user->language,$languages)) {
    $i18n_lang = $user->language;
  }
  elseif (variable_get("i18n_browser",0) && $lang=i18n_get_browser_lang()) {
    $i18n_lang=$lang;
  }
  else {
    $i18n_lang=key($languages);
  }
  
  return $i18n_lang;
}

/**
 * Check whether we are in bootstrap mode
 */  
function _i18n_is_bootstrap(){
  return !function_exists('drupal_get_headers');
}    

/**
 * Sets db_prefix to given language
 */
function _i18n_set_db_prefix($lang) {
  global $db_prefix, $db_prefix_i18n;
  if (is_array($db_prefix_i18n)) {
    $db_prefix = array_merge($db_prefix, str_replace('**', $lang, $db_prefix_i18n));
  }
}

/**
 * To get the original path. 
 * Cannot use $_GET["q"] cause it may have been already changed
 */
function _i18n_get_original_path() {
  return isset($_REQUEST["q"]) ? trim($_REQUEST["q"],"/") : '';
}

/**
 * Returns list of enabled languages from locale module
 *
 * Some code borrowed from locale module.
 * And yes, if locale enabled, languages are cached twice. But better twice than never ;-)
 */
function _i18n_locale_supported_languages() {
  if(function_exists('locale_supported_languages')){
    $languages = locale_supported_languages();
    return $languages['name'];
  } else {
    $result = db_query('SELECT locale, name FROM {locales_meta} WHERE enabled = 1 ORDER BY isdefault DESC, name ASC');
    while ($row = db_fetch_object($result)) {
      $enabled[$row->locale] = $row->name;
    }
    return $enabled;
  }
}

/**
 * Emulates drupal_goto, it may not be loaded yet
 */
function _i18n_goto($lang){
  if(!function_exists('drupal_goto')){
    require_once './includes/common.inc';    
  }
  drupal_goto($lang);
}

/**
 * i18n_selection_mode
 * Allows several modes for query rewriting and to change them programatically
 * 	off = No language conditions inserted
 * 	simple = Only current language and no language
 * 	mixed = Only current and default languages
 *  strict = Only current language
 *  default = Only default language
 *  user = User defined, in the module's settings page
 */
function i18n_selection_mode($mode=NULL){
  static $current;
  if($mode) {
    $current = ($mode == 'user') ? variable_get('i18n_selection_mode', 'simple') : $mode;
  } elseif($current) {
    return $current;
  } else {
    return $current = variable_get('i18n_selection_mode', 'simple');
  }
}

function _i18n_selection_mode(){
  return array(
    'simple' => t('Only current language and no language'),
    'mixed' => t('Only current and default languages and no language'),
    'default' => t('Only default language and no language'),    
    'strict' => t('Only current language'),
    'off' => t('All content. No language conditions apply'),
    
  );
}
?>