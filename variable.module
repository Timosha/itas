<?php
// $Id$
/**
 * @file
 * Variable API module
 */

/**
 * Implementation of hook_boot()
 * 
 * Though we don't do anything here, we ensure the module is loaded at boot stage
 * for other modules (like variable_realm) to be able to use the API
 */
function variable_boot() {
}

/**
 * Get information from an array of data
 */
function _variable_info($type, $name = NULL, $options = array()) {
  $info = &variable_static($type, $options);
  if ($name) {
    return isset($info[$name]) ? $info[$name] : array();
  }
  else {
    return $info;
  } 
}

/**
 * Implementation of hook_flush_caches()
 */
function variable_flush_caches() {
  return array('cache_variable');
}

/**
 * Check access to variable
 * 
 * All variables are restricted for editing so unless we've got some explicit access 
 * variables cannot be edited as default.
 * 
 * @param $variable
 *   Variable name or info array
 */
function variable_access($variable, $account = NULL) {
  $account = $account ? $account : $GLOBALS['user'];
  if (user_access('administer site configuration', $account)) {
    return TRUE;
  }
  elseif ($variable = _variable_variable($variable)) {
    $group = variable_get_group($variable['group']);
    if (!isset($group['access']) && !isset($variable['access'])) {
      return FALSE;
    }
    elseif (isset($group['access']) && !user_access($group['access'], $account)) {
      return FALSE;
    }
    elseif (isset($variable['access']) && !user_access($variable['access'], $account)) {
      return FALSE;
    }
    else {
      return TRUE;
    }
  }
  else {
    // We don't have information for such variable
    return FALSE;
  }
}

/**
 * Get value for simple scalar variable
 * 
 * @param $variable
 *   Variable name or array data
 * @param $options
 *   Options array, it may have the following elements
 *   - language => Language object
 *   - default => Default value if not set
 */
function variable_get_value($variable, $options = array()) {
  $options = _variable_options($options);
  $variable = _variable_variable($variable, $options);
  if (!empty($variable['multiple'])) {
    return variable_get_multiple($variable, $options);
  }
  else {
    $value = variable_get($variable['name'], NULL);
    if (isset($value)) {
      return $value;
    }
    else {
      return isset($options['default']) ? $options['default'] : variable_get_default($variable, $options);
    }
  }
}

/**
 * Get variable default
 * 
 * @param $variable
 *   Variable name or variable information
 */
function variable_get_default($variable, $options = array()) {
  $variable = _variable_variable($variable, $options);
  if (isset($variable['default'])) {
    return $variable['default'];
  }
  elseif (isset($variable['default callback'])) {
    return call_user_func($variable['default callback'], $variable, _variable_options($options));
  }
  return NULL;
}

/**
 * Set variable value
 * 
 * This basically sets the variable but also invokes hook_variable_update
 */
function variable_set_value($name, $value, $options = array()) {
  $old_value = variable_get($name, NULL);
  variable_set($name, $value);
  module_invoke_all('variable_update', $name, $value, $old_value);
}

/**
 * Get variable information
 * 
 * Variable information is collected from modules and cached by language
 * 
 * @param $name
 *   Optional variable name. Will return all if no name.
 * @param $options array
 *   Options for variable values
 *   - 'langcode', Language code
 */
function variable_get_info($name = NULL, $options = array()) {
  return _variable_info('variable', $name, _variable_options($options));
}

/**
 * Get variable group information
 * 
 * @param $group
 *   Group name. Will return all if not name.
 */
function variable_get_group($group = NULL) {
  return _variable_info('group', $group);
}

/**
 * Variable type information
 * 
 * @param $type
 *   Type name. Will return all if no name.
 */
function variable_get_type($type = NULL) {
  return _variable_info('type', $type);
}

/**
 * Clear cache
 */
function variable_cache_clear($name = NULL, $langcode = NULL) {
  if ($name || $langcode) {
    $cids = array(
      $name ? $name : '%',
      $langcode ? $langcode : '%',
    );
    db_query("DELETE FROM {cache_variable} WHERE cid LIKE :cid", array(':cid' => implode(':', $cids)));
  }
  else {
    db_query("TRUNCATE TABLE {cache_variable}");
  }
}

/**
 * Delete variable (included children variables)
 */
function variable_delete($variable) {
  $variable = _variable_variable($variable);
  variable_include();
  // We need to build the variable, it may be multiple
  $variable = variable_build($variable, $options);
  if (!empty($variable['children'])) {
    array_map('variable_del', array_keys($variable['children']));
  }
  else {
    variable_del($variable['name']);
  }
  // Invoke the hook only once even if its multiple
  module_invoke_all('variable_delete', $variable);
}

/**
 * Format printable value
 * 
 * @param $variable
 * 
 */
function variable_format_value($variable, $options = array()) {
  $variable = variable_build($variable, $options);
  $value = variable_get_value($variable, $options);
  if (isset($value)) {
    return !empty($variable['format callback']) ? call_user_func($variable['format callback'], $value, $variable, $options) : check_plain($value);
  }
  else {
    return isset($variable['empty']) ? $variable['empty'] : t('Empty');
  }
}

/**
 * Implements hook_hook_info().
 */
function variable_hook_info() {
  $hooks['variable_info'] = array(
    'group' => 'variable',
  );
  $hooks['variable_group_info'] = array(
    'group' => 'variable',
  );
  $hooks['variable_type_info'] = array(
    'group' => 'variable',
  );
  return $hooks; 
}

/**
 * Get global language object.
 * 
 * Initialize the language system if needed as we absolutely need a language here
 */
function variable_language() {
  global $language;
  if (!isset($language)) {
    drupal_bootstrap(DRUPAL_BOOTSTRAP_LANGUAGE);
  }
  return $language; 
}

/**
 * Get multiple variable values
 * 
 * @param $variable
 *   Variable name or variable array
 * @return array
 *   Key, value pairs for each sub-variable
 */
function variable_get_multiple($variable, $options = array()) {
  $variable = variable_build($variable, $options);
  $values = array();
  if ($variable && !empty($variable['children'])) {
    foreach ($variable['children'] as $name => $child) {
      $values[$child['index']] = variable_get_value($child, $options);
    }
  }
  return $values;
}

/**
 * Build full variable data
 */
function variable_build($variable, $options = array()) {
  variable_include();
  $variable = _variable_variable($variable, $options);
  return variable_build_variable($variable, $options);
}

/**
 * Normalize variable options
 * 
 * Will fill the following values if not present in the parameters
 * - langcode, Language code
 * - language, Language object
 */
function _variable_options($options = array()) {
  if (!empty($options['language'])) {
    $options['langcode'] = $options['language']->language;
  }
  elseif (!empty($options['langcode']) && ($list = language_list()) && isset($list[$options['langcode']])) {
    $options['language'] = $list[$options['langcode']];
  }
  else {
    $language = variable_language();
    $options['language'] = $language;
    $options['langcode'] = $language->language;
  }
  return $options;  
}

/**
 * Include extended API
 */
function variable_include($name = 'variable') {
  static $included;
  if (!isset($included[$name])) {
    module_load_include('inc', 'variable', $name);
  }
}

/**
 * Form for variable list
 * 
 * @param $list
 *   Variable name or list of variable names
 */
function variable_edit_form($form, $form_state, $list) {
  variable_include('variable.form');
  $list = is_array($list) ? $list : array($list);
  $form = array();
  foreach ($list as $name) {
    if ($variable = variable_get_info($name)) {
      $form[$name] = variable_form_element($variable);
    }
  }
  return system_settings_form($form);
}

/**
 * Form for module variables
 */
function variable_module_form($form, $form_state, $module) {
  variable_include();
  return variable_edit_form($form, $form_state, array_keys(variable_module_list($module)));
}

/**
 * Form for group variables
 */
function variable_group_form($form, $form_state, $group) {
  variable_include();
  return variable_edit_form($form, $form_state, array_keys(variable_group_list($module)));
}

/**
 * Implements hook_modules_uninstalled().
 */
function variable_modules_uninstalled($modules) {
  variable_include();
  array_map('variable_module_uninstall', $modules);
  variable_cache_clear();
}

/**
 * Get variable info static data, try the cache, or invoke the hook to collect it.
 * 
 * @param $type
 *   Name of the info to collect
 *   - 'variable', Variable information, hook_variable_info()
 *   - 'group', Group information, hook_variable_group_info()
 *   - 'type', Type information, hook_variable_type_info()
 * @param $options
 *   Options to retrieve or build the data.
 *   The only used option to collect the data is 'langcode', though a full array of options may be used for the hooks
 */
function &variable_static($type, $options = array()) {
  static $data;
  $name = 'variable_' . $type;
  $langcode = isset($options['langcode']) ? $options['langcode'] : 'default';

  if (!isset($data[$type])) {
    $data[$type] = &drupal_static($name);
  }
  if (!isset($data[$type][$langcode])) {
    $cache_id = $type . ':' . $langcode;
    if ($cache = cache_get($cache_id, 'cache_variable')) {
      $data[$type][$langcode] = $cache->data;
    }
    else {
      variable_include();
      $data[$type][$langcode] = variable_build_info($type, $options);
      cache_set($cache_id, $data[$type][$langcode], 'cache_variable');
    }    
  }
  // Return a reference inside the big array
  return $data[$type][$langcode];
}

/**
 * Normalize variable data
 */
function _variable_variable($variable, $options = array()) {
  if (is_array($variable)) {
    return $variable;
  }
  elseif ($variable = variable_get_info($variable, $options)) {
    return $variable;
  }
  else {
    return array('name' => $variable, 'type' => 'default');
  }
}