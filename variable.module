<?php
// $Id$
/**
 * @file
 * Variable API module
 */

/**
 * Get value for simple scalar variable
 * 
 * @param $options
 *   Options array, it may have the following elements
 *   - language => Language object
 *   - realm => Variable realm (string)
 *   - default => Default value if not set
 *   - fallback => Whether to use fallback values (for realm and language)
 * 
 */
function variable_get_value($name, $options = array()) {
  $options = variable_options($options);
  $value = variable_get_realm_value($options['realm'], $options['langcode'], $name, $options['fallback']);
  if (isset($value)) {
    return $value;
  }
  else {
    return isset($options['default']) ? $options['default'] : variable_get_default($name, $options);
  }
}

/**
 * Get variable default
 */
function variable_get_default($name, $options = array()) {
  $options = variable_options($options);
  if ($variable = variable_info($name, $options)) {
    if (isset($variable['default_callback'])) {
      return call_user_func($variable['default_callback'], $variable, $options);
    }
    elseif (isset($variable['default_value'])) {
      return $variable['default_value'];
    }
  }
  return NULL;
}

/**
 * Prepare variable options 
 */
function variable_options($options) {
  return $options + variable_status();
}

/**
 * Get variable information
 */
function variable_info($name = NULL, $options = array()) {
  static $info;
  $options = variable_options($options);
  $language = $options['language'];
  if (!isset($info)) {
    $info = &variable_static('variable_info');
  }
  if (!isset($info[$language->language])) {
    $cid = 'variable_info:' . $language->language;
    if ($cache = cache_get($cid)) {
      $info[$language->language] = $cache->data;
    }
    else {
      variable_include();
      $info[$language->language] = variable_build_info($options);
      cache_set($cid, $info[$language->language]);
    }
  }
  if ($name) {
    return isset($info[$language->language][$name]) ? $info[$language->language][$name] : array();
  }
  else {
    return $info[$language->language];
  }
}

/**
 * Get value from variable cache
 */
function variable_cache_get($name, $realm = 'default', $langcode = 'default') {
  $cid = implode(':', array($name, $realm, $langcode));
  return cache_get($cid, 'variable_cache');
}

/**
 * Set value in cache
 */
function variable_cache_set($name, $data, $realm = 'default', $langcode = 'default') {
  $cid = implode(':', array($name, $realm, $langcode));
  cache_set($cid, $data, 'variable_cache');
  //db_query("UPDATE {variable_cache} SET realm = '%s', language = '%s' WHERE cid = '%s'", $realm, $langcode, $cid);
}

/**
 * Clear cache
 */
function variable_cache_clear($name = NULL, $realm = NULL, $langcode = NULL) {
  if ($name || $realm || $langcode) {
    $cids = array(
      $name ? $name : '%',
      $realm ? $realm : '%',
      $langcode ? $langcode : '%',
    );
    db_query("DELETE FROM {variable_cache} WHERE cid LIKE '%s'", implode(':', $cids));
  }
  else {
    db_query("TRUNCATE TABLE {variable_cache}");
  }
}

/**
 * Get global language object.
 * 
 * Initialize the language system if needed as we absolutely need a language here
 */
function variable_language() {
  global $language;
  if (!isset($language)) {
    drupal_bootstrap(DRUPAL_BOOTSTRAP_LANGUAGE);
  }
  return $language; 
}

/**
 * Central static variable storage, Drupal 7 core backport
 * 
 * See http://api.drupal.org/api/function/drupal_static/7
 */
function &variable_static($name, $default_value = NULL, $reset = FALSE) {
  static $data = array(), $default = array();
  if (!isset($name)) {
    // All variables are reset. This needs to be done one at a time so that
    // references returned by earlier invocations of drupal_static() also get
    // reset.
    foreach ($default as $name => $value) {
      $data[$name] = $value;
    }
    // As the function returns a reference, the return should always be a
    // variable.
    return $data;
  }
  if ($reset) {
    // The reset means the default is loaded.
    if (array_key_exists($name, $default)) {
      $data[$name] = $default[$name];
    }
    else {
      // Reset was called before a default is set and yet a variable must be
      // returned.
      return $data;
    }
  }
  elseif (!array_key_exists($name, $data)) {
    // Store the default value internally and also copy it to the reference to
    // be returned.
    $default[$name] = $data[$name] = $default_value;
  }
  return $data[$name];
}

/**
 * Reset static variable. Drupal 7 core backport.
 * 
 * See http://api.drupal.org/api/function/drupal_static_reset/7
 * 
 * @param $name
 *   Name of the static variable to reset. Omit to reset all variables.
 */
function variable_static_reset($name = NULL) {
  variable_static($name, NULL, NULL, TRUE);
}

/**
 * Get/set variable global status
 */
function variable_status($options = NULL) {
  static $status;
  if (!isset($status)) {
    $status = array(
      'realm' => 'default',
      'langcode' => 'default',
      'language' => variable_language(),
      'fallback' => TRUE,
    );
  }
  if ($options) {
    $status = array_merge($status, $options);
  }
  return $status;  
}

/**
 * Include extended API
 */
function variable_include($name = 'variable') {
  static $included;
  if (!isset($included[$name])) {
    module_load_include('inc', 'variable', $name);
  }
}