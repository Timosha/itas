<?php
// $Id$

/**
 * @file
 * Internationalization (i18n) package - translatable content type parameters
 *
 * This new module uses a pure forms/strings approach as opposed to the old one (v5)
 * which was using some dirty db rewrite tricks.
 *
 * The i18n strings created by this module are:
 * - nodetype:type:[type]:[name,title,body,help]
 *
 * @author Jose A. Reyero, 2007
 */

/**
 * Implementation of hook_help().
 */
function i18ncontent_help($path, $arg) {
  switch ($path) {
    case 'admin/help#i18ncontent':
      $output = '<p>'. t('This module will localize all content type configuration texts.') .'</p>';
      $output .= '<ul>';
      $output .= '<li>'. t('Content type names') .'</li>';
      $output .= '<li>'. t('Submission guidelines') .'</li>';
      $output .= '<li>'. t("Content type descriptions were previously localized so they won't be affected.") .'</li>';
      $output .= '</ul>';
      $output .= '<p>'. t('To search and translate strings, use the <a href="@translate-interface">translation interface</a> pages.', array('@translate-interface' => url('admin/build/translate'))) .'</p>';
      return $output;
  }

  if (!menu_get_object() && $arg[1] == 'add' && $arg[2]) {
    $type = str_replace('-', '_', $arg[2]);
    if ($help = i18nstrings_ts("nodetype:type:$type:help")) {
      return '<p>'. filter_xss_admin($help) .'</p>';
    }
  }
}

/**
 * Implementation of hook_locale().
 */
function i18ncontent_locale($op = 'groups', $group = NULL) {
  switch ($op) {
    case 'groups':
      return array('nodetype' => t('Content type'));

    case 'refresh':
      if ($group == 'nodetype') {
        return i18ncontent_locale_refresh();
      }
  }
}

/**
 * Refresh content type strings.
 */
function i18ncontent_locale_refresh() {
  foreach (node_get_types() as $type) {
    tt("nodetype:type:$type->type:name", $type->name, NULL, TRUE);
    tt("nodetype:type:$type->type:title", $type->title_label, NULL, TRUE);
    tt("nodetype:type:$type->type:body", $type->body_label, NULL, TRUE);
    tt("nodetype:type:$type->type:description", $type->description, NULL, TRUE);
    if ($type->help) {
      i18nstrings_ts("nodetype:type:$type->type:help", $type->help, NULL, TRUE);
      $type->help = '';
      node_type_save($type);
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function i18ncontent_form_alter(&$form, $form_state, $form_id) {
  // Translate field names for title and body for the node edit form.
  if (isset($form['#id']) && $form['#id'] == 'node-form') {
    $type = $form['#node']->type;
    if (!empty($form['title']['#title'])) {
      $form['title']['#title'] = tt("nodetype:type:$type:title", $form['title']['#title']);
    }
    if (!empty($form['body_field']['body']['#title'])) {
      $form['body_field']['body']['#title'] = tt("nodetype:type:$type:body", $form['body_field']['body']['#title']);
    }
  }

  // Replace the help text default value in the node type form with data from
  // i18nstrings. Actual replacement of the help text is handled in
  // hook_node_type() and hook_help().
  if ($form_id == 'node_type_form') {
    $type = $form['#node_type']->type;
    // Use the default language for this.
    $language = language_default('language');
    if ($type) {
      $form['submission']['help']['#default_value'] = i18nstrings_ts("nodetype:type:$type:help", $form['submission']['help']['#default_value'], $language);
    }
  }
}

/**
 * Implementation of hook_node_type().
 */
function i18ncontent_node_type($op, $info) {
  $language = language_default('language');
  if ($op == 'insert' || $op == 'update') {
    if(!empty($info->old_type) && $info->old_type != $info->type) {
      i18nstrings_update_context("nodetype:type:$old_type:*", "nodetype:type:$type:*");
    }
    tt("nodetype:type:$info->type:name", $info->name, $language, TRUE);
    tt("nodetype:type:$info->type:title", $info->title_label, $language, TRUE);
    tt("nodetype:type:$info->type:body", $info->body_label, $language, TRUE);
    tt("nodetype:type:$info->type:description", $info->description, $language, TRUE);
    if (empty($info->help)) {
      i18nstrings_remove_string("nodetype:type:$info->type:help");
    } else {
      i18nstrings_ts("nodetype:type:$info->type:help", $info->help, $language, TRUE);
      // Remove the 'help' text from {node_type} to avoid both the
      // original text and translation appearing in hook_help().
      db_query("UPDATE node_type set help = '' WHERE type = '%s'", $info->type);
    }
  }

  if ($op == 'delete') {
    i18nstrings_remove_string("nodetype:type:$info->type:title");
    i18nstrings_remove_string("nodetype:type:$info->type:name");
    i18nstrings_remove_string("nodetype:type:$info->type:description");
    i18nstrings_remove_string("nodetype:type:$info->type:body");
    i18nstrings_remove_string("nodetype:type:$info->type:help");
  }
}


/**
 * Implementation of hook_menu_alter().
 *
 * Take over the node add pages.
 */
function i18ncontent_menu_alter(&$callbacks) {
  $callbacks['node/add']['page callback'] =  'i18ncontent_node_add_page';

  // @TODO avoid iterating over every router path.
  foreach ($callbacks as $path => $item) {
    if (!empty($item['page callback']) && $item['page callback'] == 'node_add') {
      $arg = arg(NULL, $path);
      $menu[$path]['title callback'] = 'i18nstrings_title_callback';
      $menu[$path]['title arguments'] = array('nodetype:type:'. $arg[2] .':name', $item['title']);
    }
  }
}

/**
 * Replacement for node_add_page.
 */
function i18ncontent_node_add_page() {
  $item = menu_get_item();
  $content = system_admin_menu_block($item);
  // The node type isn't available in the menu path, but 'title' is equivalent
  // to the human readable name, so check this against node_get_types() to get
  // the correct values.
  $types = node_get_types();
  foreach ($content as $key => $item) {
    foreach ($types as $node_type) {
      if ($item['title'] == $node_type->name) {
        $type = $node_type->type;
      }
    }
    $content[$key]['title'] = tt("nodetype:type:$type:title", $item['title']);
    $content[$key]['description'] = tt("nodetype:type:$type:description", $item['description']);
  }

  return theme('node_add_list', $content);
}
