<?php
// $Id$

/**
 * Internationalization (i18n) package.
 * 
 * Translation module: translation
 *
 * @author Jose A. Reyero, 2004, http://www.reyero.net
 *
 */

/**
 * Implementation of hook_help().
 */
function translation_help($section = 'admin/help#translation' ) {
  switch ($section) {
    case 'admin/help#translation' :
      $output = t('
        <p>This module is part of i18n package and provides support for translation relationships.</p>
        <p>The objects you can define translation relationships for are:</p>
        <ul>
        <li>Nodes</li>
        <li>Taxonomy Terms</li>
        </ul>
        <p><small>Module developed by Jose A. Reyero, <a href="http://www.reyero.net">www.reyero.net</a></small></p>' );
      break;
    case 'admin/modules#description' :
      $output = t('Manages translations between nodes and taxonomy terms. <b>Requires i18n module</b>' );
      break;
    case 'admin/access#translation':
      $output = t('<h2>Translations</h2>');
      $output = t('<strong>translate nodes</strong> <p>This one, combined with create content permissions, will allow to create node translation</p>');
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function translation_menu($may_cache) {
  $items = array();

  if ($may_cache) {
      $items[] = array(
        'path' => 'translation',
        'title' => t('translation'),
        'callback' => 'translation_page',
        'access' => user_access('administer nodes'),
        'type' => MENU_CALLBACK);
      
      $items[] = array(
        'path' => 'admin/taxonomy/translation', 
        'title' => t('translation'),
        'callback' => 'i18n_taxonomy_admin',
        'access' => user_access('administer taxonomy'),
        'type' => MENU_LOCAL_TASK);

  }
  else {
    if (arg(0) == 'node' && is_numeric(arg(1)) && variable_get('i18n_node_'.i18n_get_node_type(arg(1)), 0)) {
      $access = user_access('translate nodes');
      $type = MENU_LOCAL_TASK;      
      $items[] = array(
        'path' => 'node/'. arg(1) .'/translation', 
        'title' => t('translation'),
        'callback' => 'translation_node_page',
        'access' => $access,
        'type' => $type,
        'weight' => 3);
    }
  }

  return $items;
}

/**
 * Implementation of hook_perm
 */
function translation_perm(){
  return array('translate nodes');
}

/**
 * Implementation of hook_settings
 */
function translation_settings(){
  $form['i18n_translation_links'] = array(
    '#type' => 'radios',
    '#title' => t('Language Management'),
    '#default_value' => variable_get('i18n_translation_links', 0),
    '#options' => array(t('Interface language depends on content.'), t('Interface language is independent')),
    '#description' => t("How interface language and content language are managed."),
  );
  $form['i18n_translation_node_links'] = array(
    '#type' => 'radios',
    '#title' => t('Links to node translations'),
    '#default_value' => variable_get('i18n_translation_node_links', 0),
    '#options' => array(t('None.'), t('Main page only'), t('Teaser and Main page')),
    '#description' => t("How interface language and content language are managed."),
  );
  
  return $form;  
}
/**
 * Translation block
 * 
 * This is a simple language switcher which knows nothing about translations
 */
function translation_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Translations');
  }
  elseif($op == 'view') {
    $blocks['subject'] = t('Languages');
    $blocks['content'] = theme('item_list', translation_get_links($_GET['q']));
  }

  return $blocks;
}

/**
 * Implementation of hook_form_alter
 */
function translation_form_alter($form_id, &$form) {
  // Node edit form
	if (isset($form['type']) && $form['type']['#value'] .'_node_form' == $form_id && variable_get('i18n_node_'.$form['type']['#value'], 0)){
        $languages = i18n_supported_languages();
        if ($node->nid) {
          $translations = i18n_node_get_translations($node->nid);
        }
        elseif (arg(0) == 'translation') {
          // We are translating a node
          $snid = arg(2);
          $node->language = arg(3);
          $form = form_hidden('i18n_snid', $node->i18n_snid ? $node->i18n_snid : $snid);
          // Load the node to be translated  
          $trans = node_load(array('nid' => $snid));
          foreach ($trans as $field=>$value) {
            if ($field != 'nid' && empty($node->$field)) {
              $node->$field = $value;
            }
          }          
          $translations = i18n_node_get_translations($snid, true);

          if (!$translations) {
            $translations[$trans->language]= $trans;
          }
        }

        if ($translations) {
          foreach ($languages as $lang => $langname) {
            if ($trans = $translations[$lang]) {
              $rows[] = array($langname, l($trans->title, 'node/'.$trans->nid.'/edit'));
            }
            else {
              $langselect[$lang]= $langname;
            }
          }
        }
        else {
          $langselect = $languages;
        }
        
        $langselect = array_merge(array('' => ''), $langselect);
        //$form .= form_select(t('Language'), 'language', $node->language ? $node->language : i18n_get_lang(), $langselect, t('If you change the Language, you must click on <i>Preview</i> to get the right Categories &amp; Terms for that language.'));
        if ($rows) {
           $header = array(t('Language'), t('Title'));
           //$form .= form_group(t('translations'), theme('table', $header, $rows));
        }
    
        //return $form;
  }    
}

/**
 * Multilingual Nodes support
 */

// translation/node/id/lang
// translation/term/id

function translation_page() {
  $op = $_POST['op'] ? $_POST['op'] : arg(1);
  $edit = $_POST['edit'];
  
  switch ($op) {
    case 'node':
      print theme('page', translation_add(arg(2), arg(3)));
      break;
      
    case t('Preview'):
      $edit = node_validate($edit);
      print theme('page', node_preview($edit), t('Preview'));
      break;
      
    case t('Submit'):
      if ($nid = node_submit($edit)) {
        if (node_access('view', $edit)) {
          drupal_goto('node/'. $nid);
        }
        else if (db_result(db_query('SELECT nid FROM {node} WHERE nid = %d', arg(1)))) {
          drupal_access_denied();
        }
        else {
          drupal_goto();
        }
      }
      else {
        drupal_set_title(t('Submit'));
        print theme('page', node_preview($edit));
      }
      break;
    
    case t('Delete'):
      print theme('page', node_delete($edit), t('Delete'));
      break;
      
    default:
      // print theme('page', node_page_default(), '');
  }      
}

function translation_add($nid, $lang) {
  $type = i18n_get_node_type($nid);
  return node_add($type);
}

/**
 * This is the callback for the tab 'translations' for nodes
 */
function translation_node_page() {
  $op = $_POST['op'];
  $edit = $_POST['edit'];

  if (empty($op)) {
    $op = arg(2);
  }
  
  switch ($op) {
    case 'translation':
      $output = i18n_node_translation_status(arg(1));
      break;
  }
  print theme('page', $output);  
}

function i18n_node_translation_status($nid) {
  $languages = i18n_supported_languages();
  $translations = i18n_node_get_translations($nid, true);
  if (!$translations) {
    $node = node_load(array('nid' => $nid));
    $translations[$node->language]= $node;
  }
  foreach ($languages as $lang => $name) {
    if (array_key_exists($lang, $translations)) {
      $node = $translations[$lang];
      $rows[] = array($name, l($node->title, 'node/'.$node->nid), l(t('edit'), 'node/'.$node->nid.'/edit'));
      if ($node->nid == $nid) {
        drupal_set_title(t('Translations of ').$node->title);
      }
    }
    else {
      $rows[] = array($name, t('Not translated'), l(t('create translation'), 'translation/node/'.$nid.'/'.$lang));
  }
  }
  $header = array(t('Language'), t('Title'), t('Actions'));
  $output .= t('<h2>Translation Status</h2>') .'<br />';
  $output .= theme('table', $header, $rows);
  return $output;
}

/**
 * Hook nodeapi
 */
function translation_nodeapi(&$node, $op, $arg = 0) {
  if (variable_get("i18n_node_$node->type", 0)) {
    switch ($op) {
        
      case 'insert':
        if ( arg(0) == 'translation' ) {
          i18n_node_create_translation($node->nid, $node->language, $node->i18n_snid);
        }
        break;
  
      case 'delete':
        db_query('DELETE FROM {i18n_node} WHERE nid=%d', $node->nid);
        break;
        
    }
  }
}

/**
 * Taxonomy hook
 * $edit parameter is an array, not an object !!
 */
 // $op = insert, update, delete
function translation_taxonomy($op, $type, $edit = NULL) {
  return;
  switch ("$type/$op") {
    case 'term/insert':
    case 'term/update':
        if (!$edit['language']) {
	        // Removed language, remove trid
	        db_query('DELETE FROM {i18n_taxonomy_term} WHERE tid=%d', $edit['tid']);
	        if(db_affected_rows()) drupal_set_message(t('Removed translation info from term'));
	      }
        break;
    case 'term/delete':  
	      db_query('DELETE FROM {i18n_taxonomy_term} WHERE tid=%d', $edit['tid']);
        break;
  }
} 
/**
 * Implementation of hook_link().
 */
function translation_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();
  if ($type == 'node' && !$teaser && variable_get('i18n_node_'.$node->type, 0)) {
    $languages = i18n_supported_languages();
    $translations = i18n_node_get_translations($node->nid);
    foreach ($translations as $lang => $trnode) {
        $links[]= theme('translation_link', $languages[$lang] , 'node/'. $trnode->nid, $lang);
     }
  }
  return $links;
}

function theme_translation_link($text, $target, $lang, $separator='&nbsp;') {
  // Interface language independent from content ?
  $target = variable_get('i18n_translation_links', 0) ? $lang.'/'.$target : $target;
  return theme('i18n_link', $text, $target, $lang, $separator);
}
/**
 * Other functions
 */

/**
 * Adds language and translation fields to term edition form
 * 
 * This is a hook for taxonomy module
 */


function i18n_taxonomy_form_term($edit = array()) {
  $tid = $edit['tid'];
  $termlang= $edit['language'];
  $vid = isset($edit['vid']) ? $edit['vid'] : arg(4);
  // $trid= $edit['trid'];
  
  $languages = i18n_supported_languages();
  $selectlang = array_merge(array('' => ''), $languages);

  $vocabulary = taxonomy_get_vocabulary($vid);
  // If vocabulary has language, this should be the one for the term
  if ($vocabulary->language) {
    $edit['language'] = $vocabulary->language;
    $output = form_item(t('Language'),$languages[$vocabulary->language],t('The vocabulary already has a language.'));
  } 
  elseif ($termlang && $translations=i18n_term_get_translations($tid)) {
    // Term has translations. Not all languages are valid
    $selectlang = array('' => '');
    foreach ($languages as $lang => $langname) {
      if ($trans = $translations[$lang]) {
        $rows[] = array($langname, l($trans->name, 'admin/taxonomy/edit/term/'.$trans->tid));  
      }
      else {
        $selectlang[$lang] = $langname;
      }
    }
    $output = form_select(t('Language'), 'language', $termlang, $selectlang);

    $header = array(t('Language'), t('translated term'));
    $output .= form_group(t('term translations'), theme('table', $header, $rows));
    
  } else {
    $output = form_select(t('Language'), 'language', $termlang, $selectlang);
  }
  return $output;
}


/**
 *  Returns an url for the translated taxonomy-page, if exists 
 */
function i18n_taxonomy_url($str_tids, $lang) {
  if (preg_match('/^([0-9]+[+ ])+[0-9]+$/', $str_tids)) {
    $separator = '+';
    // The '+' character in a query string may be parsed as ' '.
    $tids = preg_split('/[+ ]/', $str_tids);
  }
  else if (preg_match('/^([0-9]+,)*[0-9]+$/', $str_tids)) {
    $separator = ',';
    $tids = explode(',', $str_tids);
  }
  else {
    return;
  }
  
  $translated_tids = array();
  foreach ($tids as $tid) {
    if ($translated_tid = i18n_term_get_translations($tid)) {
      $translated_tids[] = $translated_tid[$lang]->tid;
    }
  }
  
  return implode($separator, $translated_tids);
}
// returns array lang > term
function i18n_vocabulary_get_terms($vid, $lang, $status = 'all') {
  if ($status=='translated') {
    $andsql = ' AND i.trid > 0';
  }elseif ( $status =='untranslated' ) {
    $andsql = ' AND (i.trid = 0 or i.trid is null)';
  }

  $result = db_query("SELECT t.*, i.trid FROM {term_data} t LEFT JOIN {i18n_taxonomy_term} i USING(tid) WHERE t.vid=%d AND t.language='%s' " . $andsql, $vid, $lang);
  $list = array();
  while ($term = db_fetch_array($result)) {
     $list[] = $term;
  }
  return $list;  
}

/**
	*	getall = true to get the also node itself
	*/

function i18n_node_get_translations($nid, $getall = false) {
  $sql = 'SELECT n.nid, n.language, n.title, a.trid FROM {node} n INNER JOIN {i18n_node} a ON n.nid = a.nid INNER JOIN {i18n_node} b ON a.trid = b.trid AND b.nid =%d';
  if ($getall) {
    $result = db_query($sql, $nid);
  }
  else {
    $result = db_query($sql . ' WHERE n.nid != %d', $nid, $nid);
  }
  $items = array();
  while ($node = db_fetch_object($result)) {
      $items[$node->language] = $node;
  }
  return $items;
}

/* returns an url-part, pointing to the translated node, if exists */
function i18n_node_url($nid, $lang) {
  $sql = 'SELECT n.nid FROM {node} n INNER JOIN {i18n_node} a ON n.nid = a.nid INNER JOIN {i18n_node} b ON a.trid = b.trid AND b.nid =%d WHERE n.nid != %d AND n.language = \'%s\'';
  $result = db_fetch_object(db_query($sql, $nid, $nid, $lang));
  return $result->nid;
}

// snid = source nid
function i18n_node_create_translation($nid, $lang, $snid) {
  $trid = db_result(db_query('SELECT trid FROM {i18n_node} WHERE nid=%d', $snid));
  if (!$trid) {
    $trid = db_next_id('{i18n_node}_trid');
    db_query('INSERT INTO {i18n_node} (trid, nid) VALUES (%d, %d)', $trid, $snid);
  }
  db_query('INSERT INTO {i18n_node}(trid, nid) VALUES (%d, %d)', $trid, $nid);
}

function i18n_get_node_type($nid) {
  return db_result(db_query('SELECT type FROM {node} WHERE nid=%d', $nid));
}
/**
 * Multilingual Taxonomy
 *
 */
 
/**
 * This is the callback for taxonomy translations
 * 
 * Gets the urls:
 * 		admin/taxonomy/i18n/term/xx
 * 		admin/taxonomy/i18n/term/new/xx
 */

function i18n_taxonomy_admin() {
  $op = $_POST['op'] ? $_POST['op'] : arg(3);
  $edit = $_POST['edit'];
  switch ($op) {
     case 'term':
      print theme('page', i18n_taxonomy_term_form(arg(4), $edit), t('Term Translations'));
      break;
      
     case t('Submit'):
      drupal_set_title(t('Submit'));
      i18n_taxonomy_term_save($edit);
      print theme('page', i18n_taxonomy_overview(), t("Term Translations"));
      break;
      
    case t('Delete'):
      //print theme('page', node_delete($edit), t('Delete'));
      break;
      
    default:
      print theme('page', i18n_taxonomy_overview(), t("Term Translations"));
  }      
}  
    
/**
 * Generate a tabular listing of translations for vocabularies.
 */

function i18n_taxonomy_overview() {
  $languages = i18n_supported_languages();
  $header = array_merge($languages, array(''));
  $vocabularies = taxonomy_get_vocabularies();
  //rows[] = array();
  foreach ($vocabularies as $vocabulary) {
    $links = array();
    $types = array();
 
    $rows[] = array(array('data' => $vocabulary->name, 'colspan' =>  count($languages), 'align' => 'center'), 
        l(t('new translation'), 'admin/taxonomy/i18n/term/new/'.$vocabulary->vid));
    // Get terms/translations for this vocab 
    $result = db_query('SELECT t.*,i.trid FROM {term_data} t LEFT JOIN {i18n_taxonomy_term} i USING(tid) WHERE t.vid=%d',$vocabulary->vid);
    $list = array();
    while ($data = db_fetch_object($result)) {
      $list[] = $data;
    }
    if (!empty($list)) {
      $data = array();
       foreach ($list as $term) {
        if ($term->language) {
           if ($term->trid) {
             if (!array_key_exists($term->trid, $data)) {
               $data[$term->trid] = array();
             }
             $data[$term->trid][$term->language]= $term;
           }
           else {
             $untranslated[$term->language][] = $term;
           }
        }
      }
      // Reorder data for rows and languages
      foreach ($data as $trid => $terms) {
        $thisrow = array();
        foreach ($languages as $lang => $name) {
          if (array_key_exists($lang, $terms)) {
            $thisrow[] = $terms[$lang]->name;
           }
           else {
            $thisrow[] = '--';
           }
        }
        $thisrow[] = l(t('edit translations'), 'admin/taxonomy/i18n/term/'.$trid);
        $rows[] = $thisrow;
      }
    }
  }

  return theme('table', $header, $rows);
}

function i18n_taxonomy_term_save($edit) {
  $languages = i18n_supported_languages();
  $translations = array();
  foreach ($languages as $lang => $name) {
    $tid = $edit[$lang]['tid'];
    $old = $edit[$lang]['old'];
    if ($tid) {
      $translations[] = $tid;
    }
  }
  $trid = $edit['trid'];
  // Remove old translations
  if (is_numeric($trid)){
    db_query('DELETE FROM {i18n_taxonomy_term} WHERE trid=%d',$trid);  
  }
  // Save new translations
  if (!empty($translations)) {
    // Save translations
    if ($trid =='new') {
      // New translation group
      $trid = db_next_id('{i18n_taxonomy_term}_trid');
    } 
    foreach ($translations as $tid ) {
      //$value = $new ? $trid : 'null';
      //db_query('UPDATE {i18n_taxonomy_term} SET trid=%d WHERE tid=%d', $value, $tid);
      db_query('INSERT INTO {i18n_taxonomy_term}(trid,tid) VALUES(%d,%d)',$trid,$tid);

    }
    drupal_set_message(t('Term translations have been updated'));
  }

}
function i18n_taxonomy_term_form($trid) {
  $languages = i18n_supported_languages();
  if ($trid == 'new') {
    $translations = array();
    $vid = arg(5);
  }
  else {
    $translations =i18n_taxonomy_get_translations($trid);
    $vid = $translations[key($translations)]->vid;
  } 
  $vocabulary = taxonomy_get_vocabulary($vid);
  
  // List of terms for languages
  foreach ($languages as $lang => $langname) {
    if ($trans = $translations[$lang]) {
      $field1 = l($trans->name, 'admin/taxonomy/edit/term/'.$trans->tid);
      $tidtrans = $trans->tid;
     }
     else {
      $field1 = "--";
      $tidtrans = 0;
    }
    // Available terms for this language
    $list = i18n_array2list(i18n_vocabulary_get_terms($vid, $lang, 'all'), 'tid', 'name');
    $list[0] ='';
    $field2 = form_select('', 
          "$lang][tid", 
          $tidtrans, 
          $list);
    $field2 .= form_hidden("$lang][old", $tidtrans);
    $rows[] = array($langname, $field1, $field2);
  }
  $header = array(t('Language'), t('current translation'), t('change translation'));
  // Prepares html form
  $output = form_item(t("Vocabulary"), $vocabulary->name);
  $output .= form_hidden('trid', $trid);
  $output .= theme('table', $header, $rows);
  $output .= form_submit(t('Submit'));
  return form($output);
}


/**
 * Converts a list of arrays to an array of the form keyfield => namefield
 */
 
function i18n_array2list($data, $keyfield, $namefield = 'name') {
  foreach ($data as $key => $value) {
    if (is_array($data)) {
      $list[$value[$keyfield]] = $value[$namefield];
    }
    else {
      $list[$value->$keyfield] = $value->$namefield;
    }
  }
  return $list;
}

// returns array lang > term
function i18n_term_get_translations($tid, $getall = false) {
  $sql = 'SELECT t.* FROM {term_data} t INNER JOIN {i18n_taxonomy_term} i USING(tid) INNER JOIN {i18n_taxonomy_term} i2 ON  i.trid = i2.trid WHERE i2.tid=%d';
  if ($getall) {
    $result = db_query($sql, $tid);
  }
  else {
    $result = db_query($sql. ' AND t.tid != %d',$tid, $tid);
  }
  while ($data = db_fetch_object($result)) {
    $list[$data->language] = $data;
  }
  return $list;  
}

function i18n_taxonomy_get_translations($trid) {
  $result = db_query('SELECT t.*,i.trid FROM {term_data} t JOIN {i18n_taxonomy_term} i USING(tid) WHERE i.trid=%d',$trid);
  $list = array();
  while ($data = db_fetch_object($result)) {
    $list[$data->language] = $data;
  }
  return $list;     
}

function i18n_node_available_langs($node) {
  $languages = i18n_supported_languages();
  if ($node->nid) {
    $usedlangs = i18n_node_get_translations($node->nid);
  }
  elseif ($node->i18n_snid) {
    $usedlangs = i18n_node_get_translations($node->i18n_snid, true);
  }
  else {
    return $languages;
  }
  
  foreach ($languages as $lang=>$name) {
    if (!array_key_exists($lang, $usedlangs)) {
       $newlangs[$lang] = $name;
    }
  }
   
  return $newlangs;
    
}

function i18n_db_get_arrays($sql) {
  $result = db_query($sql);
  $list = array();
  while ($data = db_fetch_array($result)) {
    $list[] = $data;
  }
  return $list;  
}

function i18n_db_get_objects($sql) {
  $result = db_query($sql);
  $list = array();
  while ($data = db_fetch_object($result)) {
    $list[] = $data;
  }
  return $list;    
}

/**
 * Links for different languages
 */

function i18n_l($text, $lang , $url = '' , $attributes = array(), $query = NULL) {
  global $i18n_langpath;
  // If !url get from original request
  if (!$url) {
    $url = _i18n_get_original_path();
  }
  // If url has lang_prefix, remove it
  i18n_get_lang_prefix($url, true);
  // are we looking at a node?
  if (preg_match("/^(node\/)([0-9]*)$/",$url,$matches)) {
    if ($nid = i18n_node_l($matches[2], $lang)) {
      $url = "node/$nid";
    }
  }
  // or a taxonomy term
  elseif (preg_match("/^(taxonomy\/term\/)([^\/]*)$/",$url,$matches)) {//or at a taxonomy-listing?
    if ($str_tids = i18n_taxonomy_l($matches[2], $lang)) {
      $url = "taxonomy/term/$str_tids";
    }
  }
  
  return '<a href="'. i18n_url($url, $lang, $query) .'"'. drupal_attributes($attributes) .'>'. $text .'</a>';
}

function translation_url($url, $lang) {
  global $i18n_langpath;
  // If !url get from original request
  if (!$url) {
    $url = _i18n_get_original_path();
  }
  // If url has lang_prefix, remove it
  i18n_get_lang_prefix($url, true);
  // are we looking at a node?
  if (preg_match("/^(node\/)([0-9]*)$/",$url,$matches)) {
    if ($nid = i18n_node_url($matches[2], $lang)) {
      $url = "node/$nid";
    }
  }
  // or a taxonomy term
  elseif (preg_match("/^(taxonomy\/term\/)([^\/]*)$/",$url,$matches)) {//or at a taxonomy-listing?
    if ($str_tids = i18n_taxonomy_url($matches[2], $lang)) {
      $url = "taxonomy/term/$str_tids";
    }
  }
  
  return $url;
}
/**
 * Function i18n_get_links
 * 
 * Returns an array of links for all languages, with or without names/flags
 */
function translation_get_links($path = '', $names = 1) {
  $current = i18n_get_lang();
  foreach(i18n_supported_languages() as $lang => $name){
    $url = translation_url($path, $lang);
    $name = $names ? $name: '' ; // Should be localized??
    $links[]= theme('i18n_link', $name, $lang.'/'.$url , $lang);
  }
  return $links;  
}

?>